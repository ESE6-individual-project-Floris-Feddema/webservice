name: Node.js push on develop branch

on:
  push:
    branches: [develop]

env:
  WEBSITE_URL: https://development.plandar.nl

jobs:
  sonar:
    # The virtual machine that will be used on GitHub
    runs-on: ubuntu-18.04

    #     Run the steps in a Docker container on the virtual machine
    container:
      image: node:12.16.2
    steps:
      # Checkout Git repository
      - uses: actions/checkout@v2

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build:
    # The virtual machine that will be used on GitHub
    runs-on: ubuntu-18.04
    # Run the steps in a Docker container on the virtual machine
    container:
      image: node:12.16.2
    steps:
      # Checkout Git repository
      - uses: actions/checkout@v2

      - name: Get configuration
        run: gpg --quiet --batch --yes --passphrase="${{ secrets.GPG_PASSPHRASE }}" --output ./src/config.json --decrypt ./src/config.development.json.gpg

      # Install the dependencies needed for the project
      - name: Install dependencies
        run: npm ci
      # Build the project
      - name: Build
        run: npm run build --if-present
      # Test the project
      - name: Test
        run: npm test
        env:
          CI: true
      # Upload the release folder and Dockerfile artifacts to this GitHub workflow for use in the next job
      - name: Upload release artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-artifact
          path: ./build

      - name: Upload Dockerfile artifact
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile-artifact
          path: ./Dockerfile

      - name: Upload nginx config artifact
        uses: actions/upload-artifact@v1
        with:
          name: nginx-artifact
          path: ./nginx.conf

      - name: Upload kubernetes artifact
        uses: actions/upload-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube_development

  deliver:
    needs: [build, sonar]
    runs-on: ubuntu-18.04
    steps:
      # Download artifacts from GitHub workflow to use in this job
      - name: Download release artifact
        uses: actions/download-artifact@v1
        with:
          name: release-artifact
          path: ./build

      - name: Download nginx config artifact
        uses: actions/download-artifact@v1
        with:
          name: nginx-artifact
          path: ./nginx.conf

      - name: Download Dockerfile artifact
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-artifact
          path: .

      - name: Deliver Docker image
        env:
          CONTAINER_IMAGE: docker.pkg.github.com/ese6-individual-project-floris-feddema/webservice/webservice:${{ github.sha }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}"| docker login docker.pkg.github.com -u ${{ secrets.DOCKER_GITHUB_USERNAME }} --password-stdin
          docker build -t $CONTAINER_IMAGE .
          docker push $CONTAINER_IMAGE

  deploy:
    needs: deliver
    runs-on: ubuntu-18.04
    steps:
      - name: Download kubernetes artifact
        uses: actions/download-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube_development

      - uses: Azure/setup-kubectl@v1

      - uses: Azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - uses: Azure/k8s-create-secret@v1
        with:
          namespace: plandar-development
          container-registry-url: docker.pkg.github.com
          container-registry-username: ${{ secrets.DOCKER_GITHUB_USERNAME }}
          container-registry-password: ${{ secrets.GITHUB_TOKEN }}
          secret-name: github-docker-registry

      - uses: Azure/k8s-deploy@v1
        with:
          namespace: plandar-development
          manifests: |
            ./kube_development/kube_certificate.yaml
            ./kube_development/kube_deployment.yaml
            ./kube_development/kube_ingress.yaml
            ./kube_development/kube_service.yaml
            ./kube_development/kube_autoscaler.yaml
          images: |
            docker.pkg.github.com/ese6-individual-project-floris-feddema/webservice/webservice:${{ github.sha }}
          imagepullsecrets:
            github-docker-registry

  lighthouse-check:
    needs: deploy
    runs-on: ubuntu-18.04
    name: Lighthouse check
    steps:
      - name: Run Lighthouse check
        uses: foo-software/lighthouse-check-action@master
        with:
          urls: ${{ env.WEBSITE_URL }}

  zap-scan:
    needs: deploy
    runs-on: ubuntu-18.04
    name: OWASP ZAP Baseline scan
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: ${{ env.WEBSITE_URL }}
          rules_file_name: 'zaprules.tsv'
          cmd_options: '-a'